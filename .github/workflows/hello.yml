name: API Deploy Pipeline
on:
  push:
    paths:
      - .github/workflows/**
      - 'app/**' # app配下が変更された時のみ動くように設定

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} # 同じワークフローと同じブランチが並列で実行される場合
  cancel-in-progress: true

permissions: # OIDCで使用する権限をAction内で許可する
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: my-app
  ECS_SERVICE: xxxservice
  ECS_CLUSTER: xxxcluster
  ECS_TASK_DEFINITION: .aws/task-def-api.json

jobs:
  build-and-test:
    defaults:
      run:
        working-directory: app # checkout後にPjのルートに対して相対パスを指定
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code # コードの取得
        uses: actions/checkout@v4

      - name: SetUp Go WithCache # Golangのセットアップ(ランナーのGoはバージョンが合わないため基本使わない)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true # デフォルトでtrueだが明示的に設定

      - name: Download Dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      - name: Run tests
        run: go test ./... -v

      - name: Image Build # イメージをビルドして仮のタグを設置
        run: docker image build -t temp_api_image:latest ../.
     
      - name: Configure AWS credentials # OIDCを利用して認証情報を取得する
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # 秘匿情報のためシークレットを活用
          
      - name: Login to Amazon ECR
        id: login-ecr # この後のステップでログイン時に取得したレジストリ情報を得るためにidを付与
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR # イメージのタグを書き換えとECRのイメージpushコマンドを実行してくれるアクション
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag temp_api_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > api-image-uri.txt

      - name: Upload the image uri file as an artifact # artifactという保存領域にデータを保存し、job間のデータの受け渡しを行う
        uses: actions/upload-artifact@v4
        with:
          name: api-image-uri
          path: app/api-image-uri.txt # usesではworking-directoryが効かないため、PJルートから指定する必要がある
  
  deploy:
    defaults:
      run:
        working-directory: app # checkout後にPjのルートに対して相対パスを指定

    runs-on: ubuntu-latest
    needs: [build-and-test] # ここに記載されているjobが終わったら開始

    steps:
      - name: Check Out Code # コードの取得
        uses: actions/checkout@v4

      - name: Configure AWS credentials # OIDCを利用して認証情報を取得する
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # 秘匿情報のためシークレットを活用

      - name: Download the artifact # artifactという保存領域からデータを取得。job間のデータの受け渡しを行う
        uses: actions/download-artifact@v4
        with:
          name: api-image-uri
          path: app/artifacts # artifactsディレクトリに保存する

      - name: Define the image URI # imageのURIをGITHUB環境変数に登録
        run: |
          echo "API_IMAGE_URI=$(cat artifacts/api-image-uri.txt)" >> $GITHUB_ENV

      - name: Fill in the new image URI in the amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: my-api
          image: ${{ env.API_IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
